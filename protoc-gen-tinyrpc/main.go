package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
)

func main() {
	gen := rpc{}
	protogen.Options{}.Run(gen.Generate)
}

type rpc struct{}

// Generate 生成自定义服务文件
func (md *rpc) Generate(plugin *protogen.Plugin) error {
	for _, file := range plugin.Files {
		if len(file.Services) == 0 {
			continue
		}
		// 自定义服务文件名称
		fileName := file.GeneratedFilenamePrefix + ".srv.go"
		g := plugin.NewGeneratedFile(fileName, file.GoImportPath)
		// 添加内容
		g.P("// Code generated by protoc-gen-tinyrpc.")
		g.P()
		pkg := fmt.Sprintf("package %s", file.GoPackageName)
		g.P(pkg)
		g.P()
		// 添加服务及方法
		for _, s := range file.Services {
			// 添加注释以及服务对象结构体
			serviceCode := fmt.Sprintf(`%stype %s struct{}`,
				getComments(s.Comments), s.Desc.Name())
			g.P(serviceCode)
			g.P()
			// 添加服务方法
			for _, m := range s.Methods {
				funcCode := fmt.Sprintf(`
				%sfunc(this *%s) %s(args *%s,reply *%s)error{
					// define your service ...
					return nil
				}
				`, getComments(m.Comments), s.Desc.Name(), m.Desc.Name(), m.Input.Desc.Name(), m.Output.Desc.Name())
				g.P(funcCode)
			}
		}
	}
	return nil
}

// getComments 添加注释
func getComments(comments protogen.CommentSet) string {
	c := make([]string, 0)
	c = append(c, strings.Split(string(comments.Leading), "\n")...)
	c = append(c, strings.Split(string(comments.Trailing), "\n")...)

	res := ""
	for _, comment := range c {
		if strings.TrimSpace(comment) == "" {
			continue
		}
		res += "//" + comment + "\n"
	}
	return res
}
